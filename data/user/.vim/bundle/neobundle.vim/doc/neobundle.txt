*neobundle.txt*	Ultimate Vim package manager

Version: 3.0
Author : Shougo <Shougo.Matsu at gmail.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*neobundle-contents*

Introduction		|neobundle-introduction|
Usage			|neobundle-usage|
Install			|neobundle-install|
Interface		|neobundle-interface|
  Functions		  |neobundle-functions|
  Commands		  |neobundle-commands|
  Variables		  |neobundle-variables|
  Options		    |neobundle-options|
Configuration Examples	|neobundle-examples|
Unite sources		|neobundle-unite-sources|
Recipe			|neobundle-recipe|
FAQ			|neobundle-faq|

==============================================================================
INTRODUCTION					*neobundle-introduction*

*neobundle* is the ultimate Vim package manager. This plugin is inspired by
Vundle.vim (https://github.com/gmarik/vundle), but I added tons of features.

For example:
 * Uses |vimproc| if available
 * |unite.vim| interface
 * Revision lock
 * Supports svn/Mercurial repositories besides Git
 * Can use a different base path
 * Vundle like syntax

==============================================================================
USAGE						*neobundle-usage*

Refer to the example:
|neobundle-examples|

Run this command to update your bundled plugins:
>
	:NeoBundleUpdate
<
Note: To use the unite.vim interface, run this command (requires |unite.vim|):
>
	:Unite neobundle/update
<
Settings for this plugin are compatible with Vundle.vim :-)

You can search popular plugins and add neobundle settings at Vimpusher
(registration required):
	http://www.vimpusher.com/
Or at vim-scripts.org:
	http://vim-scripts.org/

Neobundle now features a plugin search for vim.org scripts (requires
|unite.vim|)
>
	:Unite neobundle/search
<
==============================================================================
INSTALL						*neobundle-install*

Requirements: Vim 7.2.051 or above.

First of all, git clone the repository.

Note: You need to have git installed.
>
	$ mkdir -p ~/.vim/bundle
	$ git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
<
And set up a path to the repository directory.
>
	set runtimepath+={path to neobundle directory}
<
Example:
>
	set runtimepath+=~/.vim/bundle/neobundle.vim
<
Now configure your neobundles. (Refer to |neobundle-examples|)

Run the |:NeoBundleInstall| command to install your plugins.
>
	$ vim +NeoBundleInstall +q

or
>
	$ . ~/.vim/bundle/neobundle.vim/bin/neoinstall
<
Note: To use neoinstall in Windows, Vim command must be in $PATH. >
        > .vim/bundle/neobundle.vim/bin/neoinstall
Note: To update and build vimproc in Windows, you can use
"neoinstall_novimproc" command. >
	>.vim/bundle/neobundle.vim/bin/neoinstall_novimproc vimproc.vim

neoinstall can take arguments(install/update plugin names).
>
	# Build vimproc before install plugins
	$ . ~/.vim/bundle/neobundle.vim/bin/neoinstall vimproc.vim
<
==============================================================================
INTERFACE					*neobundle-interface*

------------------------------------------------------------------------------
FUNCTIONS 					*neobundle-functions*

neobundle#rc([{base-path}])			*neobundle#rc()*
		Initializes neobundle.vim. {base-path} is where your
		downloaded plugins will be placed.
		If {base-path} is omitted, neobundle looks for a "bundle"
		directory in the default 'runtimepath'.
		Note: It executes ":filetype off" automatically.
		Note: You must not call the function inner
		"has('vim_starting')".
>
	if has('vim_starting')
	  set nocompatible
	  set runtimepath+={path to neobundle directory}
	endif
	call neobundle#rc(expand('~/.vim/bundle'))

	NeoBundle 'git://github.com/Shougo/neocomplcache.git'
	...

	filetype plugin indent on
<
neobundle#source({bundle-names})		*neobundle#source()*
		Same as |:NeoBundleSource|.
		{bundle-names} is a list of bundle names.

				*neobundle#exists_not_installed_bundles()*
neobundle#exists_not_installed_bundles()
		Checks if there are any bundles that are not installed.

				*neobundle#get_not_installed_bundle_names()*
neobundle#get_not_installed_bundle_names()
		Returns the names of bundles that are not installed.

						*neobundle#is_installed()*
neobundle#is_installed({bundle-name})
		Checks if bundle {bundle-name} is installed.

						*neobundle#is_sourced()*
neobundle#is_sourced({bundle-name})
		Checks if bundle {bundle-name} is loaded.

						 *neobundle#local()*
neobundle#local({directory}, [{options}, [{names}]])
		Adds the subdirectories in {directory} to
		runtimepath, like |pathogen| does. See |neobundle-options| for
		keys to set in {options}.
		If {names} is given, {names} directories are only loaded.
		Note: |:NeoBundleLocal| is a shortcut for this function.
>
		" Load plugin from "~/.vim/bundle".
		call neobundle#local("~/.vim/bundle", {})
		" Load plugin1 and plugin2 from "~/.vim/bundle".
		call neobundle#local("~/.vim/bundle",
		\   {}, ['plugin1', 'plugin2'])
<
neobundle#get({bundle-name})			 *neobundle#get()*
		Get the neobundle options dictionary for {bundle-name}.
		Useful for setting hooks.
		Example:
>
	NeoBundleLazy 'tyru/open-browser.vim', '', 'same', { 'autoload' : {
	      \ 'mappings' : '<Plug>(open-browser-wwwsearch)',
	      \ }}
	nmap gs <Plug>(open-browser-wwwsearch)

	let bundle = neobundle#get('open-browser.vim')
	function! bundle.hooks.on_source(bundle)
	  nnoremap <Plug>(open-browser-wwwsearch)
	        \ :<C-u>call <SID>www_search()<CR>
	  function! s:www_search()
	    let search_word = input('Please input search word: ', '',
	          \ 'customlist,wwwsearch#cmd_Wwwsearch_complete')
	    if search_word != ''
	      execute 'OpenBrowserSearch' escape(search_word, '"')
	    endif
	  endfunction
	endfunction
<
neobundle#get_hooks({bundle-name})		 *neobundle#get_hooks()*
		Get the neobundle "hooks" dictionary for {bundle-name}.
		Useful for setting hooks.

neobundle#call_hook({hook-name})		 *neobundle#call_hook()*
		Calls the hook {hook-name}.
		Note: If {hook-name} is "on_source", neobundle will call
		"on_source" hooks in sourced bundles.

neobundle#config({bundle-name}, {dict})		 *neobundle#config()*
neobundle#config({dict})
		Change plugin options for {bundle-name}.
		Note: To lazy-load a plugin, you can set the "lazy" flag after
		calling |:NeoBundle| or |:NeoBundleLocal|.
		It you omit {bundle-name}, it uses |neobundle#tapped|
		variable.
>
	NeoBundle 'Shougo/neocomplcache'
	call neobundle#config('neocomplcache', {
	\ 'lazy' : 1,
	\ 'autoload' : {
	\   'insert' : 1,
	\ }})

	" Use neobundle#tap()
	NeoBundle 'Shougo/neocomplete'
	if neobundle#tap('neocomplete')
	  " Some settings...
	  function! neobundle#tapped.hooks.on_source(bundle)
	    " Some settings...
	  endfunction
	  call neobundle#untap()
	endif
<
neobundle#tap({bundle-name})		 *neobundle#tap()*
		Initialize |neobundle#tapped| variable as {bundle-name}
		bundle.
		It returns non-zero if {bundle-name} is exists.

neobundle#untap()		 *neobundle#untap()*
		Clear current |neobundle#tapped| variable.

------------------------------------------------------------------------------
COMMANDS 					*neobundle-commands*

						*:NeoBundle*
:NeoBundle {repository} [[,{revision}] [,{options}]]
:NeoBundle {repository} ,{revision}, {default} [,{options}]]
		Configures a bundle.
		{repository} is the repository URI. {revision} is the desired
		revision or branch name. If omitted, the current latest
		revision will be used. {default} is a "default options
		name" (See |g:neobundle#default_options|).
		Note: Don't set neobundle setting in .gvimrc!
		Note: If you omit the protocol (ex: git or https) for a git
		repo, |g:neobundle_default_git_protocol| is used.

		Note: If you manage bundle by neobundle, it may be error
		occurred when update bundles.

		See |neobundle-options| for what to set in {options}.

:NeoBundleInstall [{name}...]			*:NeoBundleInstall*
		Installs plugins specified by {name}. {name} is
		fuzzy-searched.  If {name} is omitted, all configured plugins
		are installed.  Note: {name}s are plugin names like
		"neobundle.vim", not "Shougo/neobundle.vim".

:NeoBundleInstall! [{name}...]			*:NeoBundleInstall!*
		Same as |:NeoBundleUpdate|.

:NeoBundleUpdate [{name}...]			*:NeoBundleUpdate*
		Installs and updates plugins specified by {name}. {name} is
		fuzzy-searched.  If {name} is omitted, all configured plugins
		are installed and updated, except if they are outdated or have
		the "stay_same" option set.
		Note: {name}s are plugin names like "neobundle.vim", not
		"Shougo/neobundle.vim".

:NeoBundleUpdate! [{name}...]			*:NeoBundleUpdate!*
		Same as |:NeoBundleUpdate|, except that it disregards the
		"stay_same" option.

:NeoBundleClean [{bang} [{name}...]] 		*:NeoBundleClean*
		Removes non-configured bundles that still exist in the bundle
		path from the filesystem. If {bang} is added, force remove
		them. If {name}s are added, remove bundles specified by
		{name}s.

:NeoBundleReinstall [{name}...]		 	*:NeoBundleReinstall*
		Reinstalls the bundles specified by {name}.

:NeoBundleList 					*:NeoBundleList*
		Prints a list of configured bundles.

:NeoBundleLog 					*:NeoBundleLog*
		Prints all previous install logs.

:NeoBundleUpdatesLog 				*:NeoBundleUpdatesLog*
		Prints previous update logs.

:NeoBundleLocal {base-directory-path}		*:NeoBundleLocal*
		Registers a bundle from the directories in
		{base-directory-path} like pathogen does.

		Note: If you want to use neobundle like pathogen.vim, you
		should set a different base path from the standard neobundle
		bundles path.
>
		NeoBundleLocal ~/.vim/bundle
<
						*:NeoBundleLazy*
:NeoBundleLazy {repository} [[,{revision}] [,{options}]]
:NeoBundleLazy {repository} ,{revision}, {default} [,{options}]]
		Registers a bundle, but doesn't add it to 'runtimepath'.
>
		NeoBundleLazy 'The-NERD-tree', {'augroup' : 'NERDTree'}
		NeoBundleSource The-NERD-tree
<
		You can use it to load plugins for specific filetypes.
>
		NeoBundleLazy 'Rip-Rip/clang_complete'
		autocmd FileType c,cpp NeoBundleSource clang_complete
<
:NeoBundleSource [{name}...]			*:NeoBundleSource*
		|:source|  the bundles specified by {name}.
		If {name} is omitted, |:source| all lazy bundles.
		Note: This command is used to load the neobundles configured
		with |:NeoBundleLazy|.

:NeoBundleFetch {repository} [, {options}]	*:NeoBundleFetch*
		Registers a bundle, but doesn't add it to 'runtimepath'.
		Unlike |:NeoBundleLazy|, you cannot load the bundle with
		|:NeoBundleSource|. This command is useful for managing
		non-Vim plugins using neobundle.
>
		NeoBundleFetch 'davidhalter/jedi'
<
:NeoBundleDocs					*:NeoBundleDocs*
		Execute |:helptags| for all bundles manually.

						*:NeoBundleDirectInstall*
:NeoBundleDirectInstall {repository} [, {options}]
		Registers a bundle, and installs it directly.
		Note: The settings are saved in "extra_bundles.vim" in
		|neobundle#rc()| directory.
		Note: To uninstall direct installed bundles, you must delete
		plugin settings manually in "extra_bundles.vim" in
		|neobundle#rc()| directory and execute |:NeoBundleClean|
		command.
>
		NeoBundleDirectInstall 'Shougo/neocomplcache'
<
						*:NeoBundleEditExtra*
:NeoBundleEditExtra
		Edit extra bundles configuration easily.

:NeoBundleDisable {name}...			*:NeoBundleDisable*
		Disables bundles specified by {name}.  If a bundle is
		disabled, its path will be removed from 'runtimepath'.
		Note: This command must be executed before neobundle loads
		the plugins.

:NeoBundleCheck					*:NeoBundleCheck*
		Check plugins installation. If plugins are not installed, it
		will execute |:NeoBundleInstall| automatically. This command
		also check documentation directories and will execute
		|:NeoBundleDocs| automatically.

						*:NeoBundleRecipe*
:NeoBundleRecipe {recipe-name} [, {options}]
		Registers a bundle from "recipes/{recipe-name}.vimrecipe" file
		in 'runtimepath'.  This command is useful if you don't want to
		set bundle options.
		Note: You must install recipes(|neobundle-recipe|) before
		executing it.
>
		NeoBundleRecipe 'vimproc.vim'
<
------------------------------------------------------------------------------
VARIABLES 					*neobundle-variables*

neobundle#tapped				*neobundle#tapped*
		Current bundle variable set by |neobundle#tap()|.

g:neobundle#default_site			*g:neobundle#default_site*
		The default repository site if "site" option is omitted.

						*g:neobundle_default_site*
		Note: |g:neobundle_default_site| is obsolete.

		Defaults to "github".

g:neobundle#log_filename			*g:neobundle#log_filename*
		The log filename. Set it to "" to disable logging.

						*g:neobundle_log_filename*
		Note: |g:neobundle_log_filename| is obsolete.

		Defaults to "".

	 				*g:neobundle#enable_name_conversion*
g:neobundle#enable_name_conversion
		If you set to 1 and omit bundle name,
		|neobundle-options-regular_name| is used as bundle name.
		It is useful for absorbing difference of repository name.

g:neobundle#rm_command				*g:neobundle#rm_command*
		The command used to remove files for |:NeoBundleClean|.

						*g:neobundle_rm_command*
		Note: |g:neobundle_rm_command| is obsolete.

		Defaults to "rmdir /S /Q" on Windows or "rm -rf" in
		others.

					*g:neobundle#install_max_processes*
g:neobundle#install_max_processes
		The max number of processes used for neobundle/install source
		asynchronous update.

			*g:unite_source_neobundle_install_max_processes*
		Note: |g:unite_source_neobundle_install_max_processes| is
		obsolete.

		Defaults to "4".

					*g:neobundle#install_process_timeout*
g:neobundle#install_process_timeout
		The time of timeout seconds when updating/installing bundles.
		Note: This feature is available if you installed |vimproc|.

		Defaults to "60".

g:neobundle#default_options			*g:neobundle#default_options*
		A dictionary of preconfigured sets of options to use when
		options are omitted for individual commands or functions.
		Keys are arbitrary names for the option sets, and values are
		dictionaries themselves that store option keys and values.
		Use the special key "_" to store a "default default options".
		Example:
>
		let g:neobundle#default_options =
		          \ { 'rev' : {'rev' : 'ver.8'} }
		NeoBundle 'Shougo/neocomplcache', '', 'rev'
<
		Defaults to "{}".

				*g:neobundle#types#raw#calc_hash_command*
g:neobundle#types#raw#calc_hash_command
		The hash command to use in raw repositories.

		Defaults to "sha1sum" or "md5sum".

				*g:neobundle#types#git#default_protocol*
g:neobundle#types#git#default_protocol
		The default protocol used for git (github).
		Note: If you need to use neobundle in proxy or firewall, you
		must use it in "https".

					*g:neobundle_default_git_protocol*
		Note: |g:neobundle_default_git_protocol| is obsolete.

		Defaults to "https".

				*g:neobundle#types#git#enable_submodule*
g:neobundle#types#git#enable_submodule
		If it is non-zero, neobundle enables git submodule support.
		But it may be slow in Windows environment.

		Defaults to 1.

				*g:neobundle#types#hg#default_protocol*
g:neobundle#types#hg#default_protocol
		The default protocol used for hg (bitbucket).

					*g:neobundle_default_hg_protocol*
		Note: |g:neobundle_default_git_protocol| is obsolete.

		Defaults to "https".

------------------------------------------------------------------------------
OPTIONS 					*neobundle-options*
		The {options} in neobundle commands accept the following keys:

						*neobundle-options-name*
		name			(String)
		Specify the name of the bundle. This is used for neobundle
		management and other commands (like |:NeoBundleUpdate|). If
		omitted, the tail of the repository name will be used.
		Note: Must be unique across all bundles. If a bundle name
		conflicts with another bundle, neobundle will overwrite the
		previous settings with the new one. If a repo tail is bound to
		conflict, you can set the "name" option manually to prevent
		overwriting an existing bundle setting.
		Example:
>
		NeoBundle 'git://github.com/Shougo/unite.vim.git',
		   \ {'name' : 'unite'}
		NeoBundle 'git://github.com/foo/foo.git',
		   \ {'name' : 'foo-foo'}
		NeoBundle 'git://github.com/bar/foo.git',
		   \ {'name' : 'bar-foo'}
		NeoBundle 'git://git.code.sf.net/p/atp-vim/code',
		   \ {'name': 'atp-vim'}
<
					*neobundle-options-regular_name*
		regular_name			(String)
		Specify the normalized name of the bundle. This is used for
		neobundle management for detect depends. If omitted, neobundle
		will normalize the tail of the repository name.
		Note: Must be unique across all bundles.
		Normalized name example:
		name            : normalized name
>
		unite.vim         unite
		vim-quickrun      quickrun
<
		description		(String)
		Plugin description.

		rev			(String)
		Specify a revision number or branch/tag name.
		Note: If the type is "raw", rev is hash number.

		Example:
>
		NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
<
						*neobundle-options-default*
		default			(String)
		Specify a default option name. (See |g:neobundle#default_options|).

		directory		(String)
		Specify relative directory path from the base directory (set
		by |neobundle#rc()| or "base" option). If omitted, the "name"
		option will be used.
		Note: If you set rev "foo" when the name key is "neobundle",
		the directory key is "neobundle_foo".

		Example:
>
		NeoBundle 'git://github.com/Shougo/unite.vim.git',
		   \ {'directory' : 'unite'}
<
						*neobundle-options-recipe*
		recipe			(String)
		Use default options from the "recipes/{recipe-name}.vimrecipe"
		file in 'runtimepath'. (See |:NeoBundleRecipe|).

		Example:
>
		NeoBundle 'Shougo/unite.vim', {'recipe' : 'unite'}
<
						*neobundle-options-base_path*
		base			(String)
		Directory base path to use. If omitted, the path specified
		with |neobundle#rc()| will be used. It is useful for loading
		scripts from a different path.
		Example:
						*neobundle-options-type*
		type			(String)
		Specify the repository type. If omitted, a guess is made
		based on {repository}.

		Available types:
		"nosync"    : No synchronous
		"raw"       : Raw plugin file ("script_type" attribute is
		              needed)
		"git"       : Git
		"hg"        : Mercurial
		"svn"       : Subversion

		Example:
>
		NeoBundle 'git://host/path/repo.git', {'type': 'hg'}
		NeoBundle 'thinca/vim-localrc', {'type' : 'svn'}
<
					*neobundle-options-script_type*
		script_type		(String)
		Specify the script type. It is useful for non-official
		categorized plugins.
		For example: "indent", "plugin", "ftplugin", ...
		Example:
>
		NeoBundle 'bronzehedwick/impactjs-colorscheme', {'script_type' : 'colors'}
<
						*neobundle-options-site*
		site			(String)
		Specify the repository site.  If you omit both the repository
		URL and the "site" option, |g:neobundle#default_site| will be
		used.
		Note: You can specify site by "{site-name}:{path}".
		For example: "github:Shougo/vimshell"

		Available sites:
		"github" or "gh"    : github.com (git)
		"bitbucket" or "bb" : bitbucket.org (hg)
		"gist"              : gist.github.com (git)

						*neobundle-options-rtp*
		rtp			(String)
		Specify runtime path.
		Use this option when the repository has the Vim plugin
		in a subdirectory.
		For example: https://github.com/rstacruz/sparkup

		Example:
>
		NeoBundle 'rstacruz/sparkup', {'rtp': 'vim'}
		NeoBundle 'https://code.google.com/p/vimwiki/', {
		    \ 'rtp': "~/.vim/bundle/vimwiki/src",
		    \ }
<
						*neobundle-options-depends*
		depends			(List or String)
		Specify a list of plugins a plugin depends on.
		List items are '{plugin-name}' or ['{plugin-name}', {args}].
		Those specified in the list are installed automatically.  If
		the {plugin-name} needs options, specify them with {args}.
		Note: Type String is syntax sugar for List of {plugin-name}.

		Example:
>
		NeoBundle 'Shougo/vimfiler', {'depends' : 'Shougo/unite.vim' }
		NeoBundle 'Shougo/neocomplcache', {'depends' :
		    \ [ 'Shougo/neosnippet.git',
		    \   ['rstacruz/sparkup', {'rtp': 'vim'}],
		    \ ]}
<
						*neobundle-options-build*
		build			(Dictionary)
		Specify the build script.
		You may use this option if the plugin has to be built before
		use.
		This command is executed by |system()| or |vimproc#system()|
		in plugin runtimepath.
		For example: |vimproc|

		This dictionary accepts the following keys:

			windows		(String)
			Specify Windows environment build script.

			mac		(String)
			Specify Mac OS X environment build script.

			cygwin		(String)
			Specify Cygwin environment build script.

			unix		(String)
			Specify Unix environment build script.

			others		(String)
			Specify others environment build script.

		Example:
>
	      NeoBundle 'Shougo/vimproc.vim', {
	      \ 'build' : {
	      \     'windows' : 'make -f make_mingw32.mak',
	      \     'cygwin' : 'make -f make_cygwin.mak',
	      \     'mac' : 'make -f make_mac.mak',
	      \     'unix' : 'make -f make_unix.mak',
	      \    },
	      \ }
<
						*neobundle-options-augroup*
		augroup		(String)
		Specify an augroup name that the plugin uses for |VimEnter| or
		|GUIEnter| autocmd events.
		Neobundle will call their |VimEnter| or |GUIEnter| autocmds
		automatically when |:NeoBundleSource| is executed.
		Note: You'll want to set this option because some plugins
		rely on autocmds defined for |VimEnter| or |GUIEnter|, but by
		using |:NeoBundleSource| after loading .vimrc, those autocmds
		may get skipped. Some examples are, "fugitive", "NERDTree",
		and "session.vim".

		Examples:
>
	" NERDTree uses augroup NERDTreeHijackNetrw.
	NeoBundle 'scrooloose/nerdtree', { 'augroup' : 'NERDTreeHijackNetrw'}
	" fugitive uses augroup fugitive.
	NeoBundle 'tpope/vim-fugitive', { 'augroup' : 'fugitive'}
<
		This option is also valid in |:NeoBundleLazy|.

					*neobundle-options-external_commands*
		external_commands	(Dictionary or List or String)
		Specify a list of external commands that the plugin depends
		on. List items are '{command-name}' or ['{command-name}',
		...] or { {dictionary} }.
		The commands are checked when loading the plugin.
		Note: Type String is syntax sugar for list of {command-name}s.

		The {dictionary} has following keys:

			windows		(String)
			Specify Windows environment external commands.

			mac		(String)
			Specify Mac OS X environment external commands.

			cygwin		(String)
			Specify Cygwin environment external commands.

			unix		(String)
			Specify Unix environment external commands.

			others		(String)
			Specify others environment external commands.

		Example:
>
		NeoBundle 'ujihisa/neco-ghc', { 'external_commands' : 'ghc-mod' }
<
						*neobundle-options-stay_same*
		stay_same		(Number)
		If set to 1, neobundle doesn't update it automatically when
		|:NeoBundleUpdate| or ":Unite neobundle/update" is called with
		no arguments. It is useful for outdated plugins that can no
		longer be updated.
>
		NeoBundle 'Shougo/neobundle', { 'stay_same' : 1 }
<
						*neobundle-options-lazy*
		lazy			(Number)
		If set to 1, neobundle doesn't add the path to user
		runtimepath.

						*neobundle-options-force*
		force			(Number)
		If set to 1, neobundle will load plugin files in the plugin
		repository forcelly.
		Note: It is useful for using Bundle within bundle.
		https://github.com/Shougo/neobundle.vim/issues/199

						*neobundle-options-overwrite*
		overwrite		(Number)
		If set to 1, neobundle doesn't overwrite the path to user
		runtimepath.

						*neobundle-options-resettable*
		resettable		(Number)
		If set to 0, neobundle doesn't reset the path in
		|neobundle#rc()|.

						*neobundle-options-gui*
		gui			(Number)
		If set 1, neobundle will only load the plugin in GUI Vim.

		Example: >
	NeoBundleLazy 'tyru/restart.vim', '', 'same', {
	      \ 'gui' : 1,
	      \ 'autoload' : {
	      \  'commands' : 'Restart'
	      \ }}
<
						*neobundle-options-terminal*
		terminal		(Number)
		If set to 1, neobundle will only load the plugin in Terminal
		Vim.

						*neobundle-options-vim_version*
		vim_version		(String)
		Minimal vim version of the plugin supported.
		It accepts some version formats such as "7" and "7.3" and
		"7.3.885".

						*neobundle-options-disabled*
		disabled		(Number)
		If set to 1, neobundle will disable the plugin.

		Example: >
	" neocomplete requires vim 7.3.885 or above.
	NeoBundle 'Shougo/neocomplete', {
	    \ 'depends' : 'Shougo/context_filetype.vim',
	    \ 'disabled' : !has('lua'),
	    \ 'vim_version' : '7.3.885'
	    \ }
<

						*neobundle-options-autoload*
		autoload		(Dictionary)
		Specify autoload conditions.
		If you set it, neobundle will execute |:NeoBundleSource|
		automatically when the conditions are met.
		Note: You can omit "autoload" dictionary. It is useful for
		|:NeoBundleLazy| command.

		This dictionary accepts the following keys:

			filetypes	(List) or (String)
			Filetype list.

			filename_patterns	(List) or (String)
			Filename regex pattern list.

			commands	(List) or (String)
			Command list. The item can be following dictionary.
				name		(String)
				Command name.

				complete	(String)
				The type of completion supported for the
				input.  Refer to |:command-completion| for
				information.

				Example:

			functions	(List) or (String)
			Functions list.

			mappings	(List) or (String)
			Mappings list. The items are {mapping} or
			[{mode}, {mapping1}, [{mapping2}, ...]].  If {mode} is
			omitted, "nxo" is used.
			Note: You can use plugin prefix mappings.
			For example, you can use "<Plug>(ref-" instead of
			"<Plug>(ref-back)" and so on.
			Note: But you cannot use lazy <Plug> mappings twice.
			For example: >
			NeoBundleLazy 'osyo-manga/vim-anzu', {
			  \'autoload': {'mappings': '<Plug>(anzu-'}}
			" Not working!!
			nmap n <Plug>(anzu-jump-n)<Plug>(anzu-echo-search-status)zv
			nmap N <Plug>(anzu-jump-N)<Plug>(anzu-echo-search-status)zv
<
			unite_sources	(List) or (String)
			Unite source name list.
			Note: To use this feature, you must install latest
			|unite.vim|.

			insert		(Number)
			If set to non-zero, neobundle will |:NeoBundleSource|
			on |InsertEnter| autocmd.

			explorer	(Number)
			If set to non-zero, neobundle will |:NeoBundleSource|
			on editing non-file.
			Note: It is useful for explorer behavior plugins.
			Ex: vimfiler, metarw...
			Note: To autoload vimfiler, you must disable netrw in
			.vimrc. >
			" Disable netrw.vim
			let g:loaded_netrwPlugin = 1
<
			on_source	(List) or (String)
			Load the bundle when the list bundles are loaded.
			For example: >
			if neobundle#tap('plugin-B.vim')
			  call neobundle#config({
			        \   'autoload' : {
			        \     'on_source' : [ 'plugin-A.vim' ]
			        \   }
			        \ })
			  call neobundle#untap()
			endif
<
			plugin-B is loaded before plugin-A is loaded.

			function_prefix	(String)
			Autoload function prefix in functions.
			{function_prefix}#...
			If the prefix is set, functions were loaded
			automatically.
			If omitted it, automatically generated prefix is used.
			Example: If you use "unite.vim", "unite" function
			prefix is used.

		Examples:
>
	NeoBundleLazy 'Rip-Rip/clang_complete', {
	      \ 'autoload' : {
	      \     'filetypes' : ['c', 'cpp'],
	      \    },
	      \ }
	NeoBundleLazy 'basyura/TweetVim', { 'depends' :
	      \ ['basyura/twibill.vim', 'tyru/open-browser.vim'],
	      \ 'autoload' : { 'commands' : 'TweetVimHomeTimeline' }}
	NeoBundleLazy 'kana/vim-smartword', { 'autoload' : {
	      \ 'mappings' : [
	      \   '<Plug>(smartword-'']
	      \ }}
	NeoBundleLazy 'Shougo/vim-vcs', {
	      \ 'depends' : 'thinca/vim-openbuf',
	      \ 'autoload' : {'functions' : 'vcs#info', 'commands' : 'Vcs'},
	      \   }
	NeoBundleLazy 'Shougo/vimshell',{
	      \ 'depends' : 'Shougo/vimproc.vim',
	      \ 'autoload' : {
	      \   'commands' : [{ 'name' : 'VimShell',
	      \                   'complete' : 'customlist,vimshell#complete'},
	      \                 'VimShellExecute', 'VimShellInteractive',
	      \                 'VimShellTerminal', 'VimShellPop'],
	      \   'mappings' : ['<Plug>(vimshell_']
	      \ }})
	NeoBundleLazy 'Shougo/vimfiler', {
	      \ 'depends' : 'Shougo/unite.vim',
	      \ 'autoload' : {
	      \    'commands' : [{ 'name' : 'VimFiler',
	      \                    'complete' : 'customlist,vimfiler#complete' },
	      \                  'VimFilerExplorer',
	      \                  'Edit', 'Read', 'Source', 'Write'],
	      \    'mappings' : ['<Plug>(vimfiler_'],
	      \    'explorer' : 1,
	      \ }
	      \ }
	NeoBundleLazy 'Shougo/junkfile.vim', {
	      \ 'autoload' : {
	      \   'commands' : 'JunkfileOpen',
	      \   'unite_sources' : ['junkfile', 'junkfile/new'],
	      \ }}
	NeoBundleLazy 'tyru/winmove.vim', { 'autoload' : {
	      \ 'mappings' : [
	      \   ['n', '<Plug>(winmove-']],
	      \ },
	      \ 'gui' : 1,
	      \ 'augroup' : 'winmove',
	      \ }
	NeoBundleLazy 'sophacles/vim-processing', { 'autoload' : {
	      \'filename_patterns': '\.pde$'
	      \}}
	" Omit autoload dictionary.
	NeoBundleLazy 'LeafCage/cmdlineplus.vim', {
	      \ 'mappings': [['c', '<Plug>(cmdlineplus-']]}
<
						*neobundle-options-hooks*
		hooks			(Dictionary)
		Specify hook functions. The following hook functions are
		defined:

						*neobundle-hooks-on_source*
			on_source
			Called before scripts are sourced. It is useful for
			plugin initialization in lazy bundles.
			Note: In Vim initializing, calling the hooks are
			delayed until |VimEnter|.
			Note: To re-call on_source hook when reloading .vimrc,
			you must call the hook in end of .vimrc.

					*neobundle-hooks-on_post_source*
			on_post_source
			Called after scripts are sourced.
			Note: In Vim initializing, calling the hooks are
			delayed until |VimEnter|.
			Note: To re-call on_source hook when reloading .vimrc,
			you must call the hook in end of .vimrc.

					*neobundle-options-type__protocol*
		type__protocol		(String)
		The protocol used for types.
		"https" and "git" and "ssh" are available for git type.
		"https" is available for hg type.
		If omitted, |g:neobundle#types#git#default_protocol|
		or |g:neobundle#types#hg#default_protocol| is used.
		Note: This attribute is available in git and hg types only.

		Examples:
>
		NeoBundle 'ujihisa/neco-ghc', { 'type__protocol' : 'ssh' }
<
					*neobundle-options-type__filename*
		type__filename		(String)
		The downloaded filename.
		If omitted, uri filename will be used.
		It is useful for downloading vim.org scripts.
		Note: This attribute is available in raw type only.

		Examples:
>
		NeoBundle 'http://www.vim.org/scripts/download_script.php?src_id=19619',
		\ { 'type__filename' : 'python.vim', 'script_type' : 'syntax' }
<
		Examples:			|:NeoBundle-examples|
>
		NeoBundle 'git_repository_uri'
		NeoBundle 'script_name'
		NeoBundle 'http://github.com/tpope/vim-fugitive.git'
		NeoBundle 'Shougo/neocomplcache', {'depends' :
		    \ [ 'Shougo/neosnippet.git',
		    \   ['rstacruz/sparkup', {'rtp': 'vim'}],
		    \ ]}
		NeoBundle 'github:Shougo/vimshell'

		" Pushable github repository.
		NeoBundle 'git@github.com:Shougo/neocomplcache.git'

		" For bitbucket svn repository.
		NeoBundle 'http://svn.macports.org/repository/macports/contrib/mpvim/'

		" For bitbucket hg repository.
		NeoBundle 'bitbucket:ns9tks/vim-fuzzyfinder'
		NeoBundle 'https://bitbucket.org/ns9tks/vim-fuzzyfinder'

		" For bitbucket git repository(.git is needed).
		NeoBundle 'bitbucket:kh3phr3n/vim-qt-syntax.git'
		NeoBundle 'https://bitbucket.org/kh3phr3n/vim-qt-syntax.git'

		" For raw repository.
		NeoBundle 'https://raw.github.com/m2ym/rsense/master/etc/rsense.vim',
		      \ {'script_type' : 'plugin'}

		" For gist repository.
		NeoBundle 'gist:Shougo/656148', {
		      \ 'name': 'everything.vim',
		      \ 'script_type': 'plugin'}
		NeoBundle 'gist:355360', {
		      \ 'name': 'ambicmd.vim',
		      \ 'script_type': 'plugin'}
<
		Neobundle supports revision (or branch) lock.
		Note: The revision (or branch) is checked out in
		install/update.
		Note: You can either specify the revision manually or set the
		to revision "master" to restore a plugin.
>
		NeoBundle 'Shougo/vimshell', '3787e5'
		NeoBundle 'Shougo/vimshell', 'master'
<
		If type is "nosync", neobundle does not update
		automatically (like pathogen.vim). Refer to |NeoBundleLocal|.
>
		NeoBundle 'muttator', {'type' : 'nosync', 'base' : '~/.vim/bundle'}
<
		Note: To use hg commands for git repository, please use this.
>
		NeoBundle 'git://github.com/Shougo/neobundle.vim.git', {'type': 'hg'}
<
==============================================================================
EXAMPLES					*neobundle-examples*
>
	if has('vim_starting')
	  set nocompatible                " Recommend
	  set runtimepath+={path to neobundle directory}
	endif

	" Use git protocol.
	" let g:neobundle#types#git#default_protocol = 'git'

	call neobundle#rc(expand('~/.vim/bundle'))

	" Let neobundle manage neobundle
	NeoBundleFetch 'Shougo/neobundle.vim'

	" Use neobundle standard recipes.
	NeoBundle 'Shougo/neobundle-vim-recipes'

	" My Bundles here:
	" Refer to |:NeoBundle-examples|.
	" Note: You don't set neobundle setting in .gvimrc!

	" ...

	filetype plugin indent on       " Required!

	" Installation check.
	NeoBundleCheck

	"...

	if !has('vim_starting')
	  " Call on_source hook when reloading .vimrc.
	  call neobundle#call_hook('on_source')
	endif
<
==============================================================================
UNITE SOURCES					*neobundle-unite-sources*

Here let me explain about a source for |unite| provided in neobundle.

					*neobundle-unite-source-neobundle*
neobundle
		Nominates bundles as a candidate.

		Note: On windows
		If argument is bang(!), print plugins path instead of plugins
		status.
		Note: Other platforms
		If argument is bang(!), print plugins status instead of plugins
		path.

		http://github.com/Shougo/vimproc.vim

				*neobundle-unite-source-neobundle-install*
neobundle/install
		Install configured plugins asynchronously.

		Note: To install |vimproc| plugin is recommended.
		http://github.com/Shougo/vimproc.vim

		If argument is bang(!), it will install and update all plugins.

		Source arguments:
		bundle names (fuzzy searched).

		Example:
>
		:Unite neobundle/install:!
		:Unite neobundle/install:neocomplcache
		:Unite neobundle/install:neocomplcache:unite.vim
<
		If you use the source with "-auto-quit" option, the unite
		buffer will close automatically.
>
		:Unite neobundle/install -auto-quit
<
					*neobundle-unite-source-neobundle-log*
neobundle/log
		Print previous neobundle install logs.

				*neobundle-unite-source-neobundle-update*
neobundle/update
		Install and update configured plugins asynchronously, except
		for outdated ones or those with the "stay_same" option.
		Note: This source is the same as "neobundle/install:!".
		Note: Installing the |vimproc| plugin is recommended.

		If argument is bang(!), it will not be with fuzzy search.
		If argument is "all", it will update all plugins.

		If you use the source with "-auto-quit" option, the unite
		buffer will close automatically.
>
		:Unite neobundle/update -log -wrap -auto-quit
<
				*neobundle-unite-source-neobundle-search*
neobundle/search
		Search plugin settings from sources.
		Note: This source requires "curl" or "wget" command.
		Note: If you get errors in this source, please refresh the
		cache file by |<Plug>(unite_redraw)|.

		Source arguments:
		source names.

		Following source names are available:
		"vim-script.org" :
			Search plugins settings from "http://vim-scripts.org/".
		"neobundle-vim-recipes" :
			Search plugins settings from the |neobundle-recipe|.
		"github"  :
			Search plugins settings from "http://github.org/".

				*neobundle-unite-source-neobundle-lazy*
neobundle/lazy
		List lazy configured plugins(not sourced by
		|:NeoBundleSource|).

							*unite-kind-neobundle*
neobundle		An interface for neobundle bundles. It is used in
			neobundle source and neobundle/lazy sources.
	update		Update bundles(Default action)
	delete		Delete bundles
	preview		view the plugin documentation
	reinstall	Reinstall bundles
	narrow		Narrow bundle files
	edit		Browse bundle directory
	start		Browse github plugin page

Actions for each of the sources

neobundle/search			*unite-action-neobundle-search*
	yank		Yank plugin settings (Default action).
	install		Direct install plugins from repository.
			Note: The settings are saved in "extra_bundles.vim" in
			|neobundle#rc()| directory.
	start		Browse github plugin page.
	open		Open the recipe file.

	Note: If you use the install action, you cannot customize the bundle
	settings.

neobundle/lazy					*unite-action-neobundle-lazy*
	source		Source plugin files (Default action)

==============================================================================
RECIPE						*neobundle-recipe*

neobundle/search source loads recipes from "recipes/*.vimrecipe" files in
'runtimepath'.

The standard recipes are in "neobundle-vim-recipes".

https://github.com/Shougo/neobundle-vim-recipes

You can use the recipes with the following command in .vimrc.
>
	NeoBundle 'Shougo/neobundle-vim-recipes'
<

The recipe files are in json format, like this:

>
	# Vim recipe file for neobundle.
	{
	        'name' : 'neobundle',
	        'path' : 'Shougo/neobundle',
	        'description' : 'Ultimate Vim package manager',
	        'author' : 'Shougo',
	        'website' : 'https://github.com/Shougo/neobundle.vim'
	}
<
		A recipe has the following keys. Most of keys are the same as
		those used in the neobundle configuration
		dictionary(|neobundle-options|).
		"#" starts a comment string, but they must start at the
		beginning of the line.

		name			(String)	(Required)
		Specify plugin name.

		path			(String)	(Required)
		The repository URI.
		Note: You can abbreviate long complete path, such as
		"Shougo/neobundle.vim" instead of
		"git://github.com/Shougo/neobundle.vim.git"

		description		(String)	(Optional)
		Plugin description to show in neobundle/search.

		author			(String)	(Optional)
		The script author name to show in neobundle/search.

		base			(String)	(Optional)
		Directory base path.

		type			(String)	(Optional)
		Specify repository type.

		script_type		(String)	(Optional)
		Specify script type.

		site			(String)	(Optional)
		Repository site.

		rtp			(String)	(Optional)
		Runtime path. Some plugin repositories contain the
		vim plugins in a subdirectory, whose name is usually
		"vim".

		autoload		(Dictionary)	(Optional)
		Autoload rules. See |neobundle-options-autoload|.

		depends		(List or String)	(Optional)
		Dependency plugins list.

		build			(Dictionary)	(Optional)
		Build script. e.g. make

		external_commands
			(Dictionary or List or String)	(Optional)
		Dependency external commands.

==============================================================================
FAQ						*neobundle-faq*

Q: What's the neobundle advantage for Vundle or other plugin management
system?

A:
   1. improved command name(:Bundle vs :NeoBundle).
   2. neobundle works if you set 'shellslash' in your .vimrc.
   3. neobundle supports vimproc(asynchronous update/install).
   4. neobundle supports unite.vim interface(update/install/search).
   5. neobundle supports revision lock feature.
   6. neobundle supports other VCS(Subversion/Git).
   7. neobundle supports lazy initialization for optimizing startup time.
   8. and so on...

Q: I want to manage the rsense Vim plugin using neobundle.

A: Use |neocomplcache-rsense|. Installation and settings can be found in the
neocomplcache-rsense docs.
Note: neocomplcache-rsense depends |neocomplcache| plugin.

https://github.com/Shougo/neocomplcache-rsense

Q: I want to use "https" protocol instead of "git" (over proxy).

A: Change |g:neobundle#types#git#default_protocol|.
>
	let g:neobundle#types#git#default_protocol = 'https'
<

Q: Vim freezes when a NeoBundle command is run with a typo in the repo name.

A: It's a git feature. Git awaits user input when the repo name is
wrong. You can install |vimproc| to keep your Vim from freezing:
	https://github.com/Shougo/vimproc.vim

Q: Duplicated error was printed when sourcing .vimrc.

A: Your .vimrc was wrong. You must reset neobundle setting by |neobundle#rc()|
in .vimrc.
Note: You must not call |neobundle#rc()| inner "has('vim_starting')".
>
	if has('vim_starting')
	  set runtimepath+={path to neobundle directory}
	  " This is wrong neobundle#rc().
	  "call neobundle#rc(expand('~/.vim/bundle'))
	endif

	" This is OK.
	call neobundle#rc(expand('~/.vim/bundle'))
<

Q: I want to compile vimproc automatically.

A:
>
	NeoBundle 'Shougo/vimproc.vim', {
		\ 'build' : {
			\     'windows' : 'make -f make_mingw32.mak',
			\     'cygwin' : 'make -f make_cygwin.mak',
			\     'mac' : 'make -f make_mac.mak',
			\     'unix' : 'make -f make_unix.mak',
			\    },
			\ }
<
Q: What's the "outdated" plugin?

A: Last update time is older than one week -> Automatic updates are disabled
until one day from the last update.
Last update time is older within one week -> Automatic updates are every time.
Note: If you use update with name or use "all" argument in neobundle/update
source or use "!" in |:NeoBundleUpdate| command, this feature will be
disabled; it forces updates them.

Q: I want to update messages in unite buffer.

A:
>
	Unite -log -wrap neobundle/update
<

Q: neobundle.vim is not worked in debian/Ubuntu Linux...

A: Did you use "debian.vim"? "debian.vim" changes 'runtimepath'.
So it conflicts with neobundle. You should not use "debian.vim".

Q: neobundle.vim fails update in submodule repository.

A: neobundle.vim supports submodule repository. But I think the repository was
changed recently from non-use submodule to use submodule. You must reinstall
the repository.

Q: I want to install github plugins with Subversion.

A:
>
		NeoBundle 'thinca/vim-localrc', {'type' : 'svn'}
<
Q: Why change git default protocol to "https" from "git"?
After update, neobundle asks me to update all of my plugins.  It's a kind of
nightmare.

A: Because, github changed default protocol "git" to "https".
https://help.github.com/articles/which-remote-url-should-i-use

In above page, git protocol description is not found.

I think git protocol is default protocol for git and it is fast.
But in proxy or firewall environment, git protocol cannot be used.
I responded the firewall problem recently.

If you don't want to change default protocol, you can set
|g:neobundle#types#git#default_protocol| manually.  I don't change the default
value.

Q: I want to add absolute path in runtimepath with |:NeoBundle| and
|:NeoBundleLazy|.
https://github.com/Shougo/neobundle.vim/issues/136

A: You can use "nosync" type. >
	NeoBundle '/absolute/path/to/plugin', { 'type' : 'nosync' }

Q: For example, I would like to register the IR_Black colorscheme from it's
original URL, without cloning one of the many mirror repo.
https://github.com/Shougo/neobundle.vim/issues/140

A: This feature is already implemented. >
	NeoBundle 'http://blog.toddwerth.com/entry_files/8/ir_black.vim', {
	\ 'name': 'ir_black.vim',
	\ 'script_type': 'colors'}

Q: Problem with lazy loading of matchit plugin.
https://github.com/Shougo/neobundle.vim/issues/153

A:
>
	NeoBundleLazy 'matchit.zip', { 'autoload' : {
	      \ 'mappings' : ['%', 'g%']
	      \ }}
	let bundle = neobundle#get('matchit.zip')
	function! bundle.hooks.on_post_source(bundle)
	  silent! execute 'doautocmd Filetype' &filetype
	endfunction
<

Q: Cannot load colorscheme when reloading .vimrc.
https://github.com/Shougo/neobundle.vim/issues/157

A: You must write :NeoBundle lines before filetype plugin indent on and syntax
enable.
>
	filetype plugin indent on

	NeoBundle 'tomasr/molokai'
	...

	syntax enable
	colorscheme molokai
<

Q: Error was printed when sourcing .vimrc.

A: You must not call |neobundle#rc()| inner "has('vim_starting')".
>
	if has('vim_starting')
	  set runtimepath+={path to neobundle directory}
	endif
	" OK!
	call neobundle#rc(expand('~/.vim/bundle'))
>

Q: Timeout on github makes Vim terribly slow if the repository is not found in
console Vim.
https://github.com/Shougo/neobundle.vim/issues/175

A: |vimproc| and |system()| uses input redirection.  But git ignores it when
you used https protocol in console Vim. So it freezes. I think it is bad
feature in git. I cannot fix it.  You should change
|g:neobundle#types#git#default_protocol| to "git".

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
